{"meta":{"title":"秀秀的博客","subtitle":null,"description":null,"author":"xiuxiu","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-04-13T09:24:01.000Z","updated":"2018-04-16T09:32:47.370Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-09T13:31:59.000Z","updated":"2018-04-16T09:30:41.350Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-04-09T13:30:01.000Z","updated":"2018-05-08T06:24:08.302Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"TortoiseGit安装、配置","slug":"TortoiseGit安装、配置","date":"2018-09-25T07:48:07.000Z","updated":"2018-09-25T09:11:04.384Z","comments":true,"path":"2018/09/25/TortoiseGit安装、配置/","link":"","permalink":"http://yoursite.com/2018/09/25/TortoiseGit安装、配置/","excerpt":"","text":"1.TortoiseGit简介tortoiseGit是一个开放的git版本控制系统的源客户端，支持Winxp/vista/win7.该软件功能和git一样 2.TortoiseGit下载tortoiseGit下载地址：https://download.tortoisegit.org/tgit/安装包下载 3.TortoiseGit安装安装顺序：先安装程序包,然后安装语言包(LanguagePack).安装说明：因为TortoiseGit 只是一个程序壳,必须依赖一个 Git Core,所以安装前请确定已完成git安装和配置 可参考：Git安装：https://www.cnblogs.com/xiuxingzhe/p/9300905.html Git生成秘钥及GitLab配置： http://www.cnblogs.com/xiuxingzhe/p/9303278.html 3.1 安装程序包 双击TortoiseGit-2.6.0.0-64bit.msi，弹出安装导向页面 一路Next&gt; 即可，配置均选择默认 点击Install 点击Finish，如果以前有老版本,则选择覆盖,关闭旧程序并尝试重启即可 3.2 安装语言包如果想使用英文版本的该工具，不想使用中文版本的，则该模块操作可忽略 双击TortoiseGit-LanguagePack-2.6.0.0-64bit-zh_CN.msi，弹出安装导向 点击下一步，安装完成后，点击完成 3.3 配置TortoiseGit的环境 在环境变量中添加TortoiseGit的路径 4 TortoiseGit配置4.1 常规配置 先选择一个本地的目录，作为git项目存放的目录，方便管理。本文选择：E:\\project\\clear-project，建议：路径中不要包含中文 在空白处点击鼠标右键, 选择 –&gt; TortoiseGit –&gt; Settings, 弹出配置界面(当TortoiseGit安装完成后，鼠标右键点击后，默认出现 TortoiseGit 相关选项) 点击General，在页面中选择Language下拉框，选择“中文(简体)中华人名共和国”，然后点击应用，确定关闭对话框(当然也可以继续使用英文) 4.2 Git生成秘钥 在.ssh 目录下右键打开Git Bash(.ssh目录不存在，手动创建) 生成秘钥：ssh-keygen -t rsa -C “your_email@youremail.com“ ，直接Enter就行，然后会提示输入密码(可输可不输) 执行完成之后，在.ssh 目录下就会生成秘钥文件 4.3 Github 配置密钥将.ssh文件夹中id_rsa中的密钥拷贝到github中SSH keys / Add new 的key中 5 TortoiseGit使用示例 在本地目标下载目录下，右键–&gt;TortoiseGit(T)–&gt;克隆，粘贴SSH 链接地址到URL，点击确定 确认项目已从gitlab上克隆到本地","categories":[{"name":"TortoiseGit,git","slug":"TortoiseGit-git","permalink":"http://yoursite.com/categories/TortoiseGit-git/"}],"tags":[{"name":"TortoiseGit,git","slug":"TortoiseGit-git","permalink":"http://yoursite.com/tags/TortoiseGit-git/"}],"keywords":[{"name":"TortoiseGit,git","slug":"TortoiseGit-git","permalink":"http://yoursite.com/categories/TortoiseGit-git/"}]},{"title":"百度地图API使用","slug":"百度地图API使用","date":"2018-06-15T02:19:56.000Z","updated":"2018-06-15T06:48:05.205Z","comments":true,"path":"2018/06/15/百度地图API使用/","link":"","permalink":"http://yoursite.com/2018/06/15/百度地图API使用/","excerpt":"","text":"百度地图开发者教程百度地图开发者教程 百度地图API密匙申请方法1.首先打开网址注册一个账号。填好信息好提交。 申请地址http://lbsyun.baidu.com/apiconsole/key 2.点击创建应用弹出如下窗口。3.按图所示填写自己所需要的菜单功能。4.提交后，会出现以下图示一连数字那就是地图的API。 地图API示例1.设置覆盖物1234567891011121314151617181920212223242526var map = new BMap.Map(&quot;allmap&quot;,&#123;minZoom:3,maxZoom:5&#125;);// 创建Map实例,minZoom：设置地图允许的最小级别，maxZoom：设置地图允许的最大级别var point = new BMap.Point(116.473008,39.916605);// 设置地理坐标点map.centerAndZoom(point, 4);// 初始化地图,即可设置中心点和地图缩放级别map.enableScrollWheelZoom(true);//启用滚轮放大缩小//设置marker图标为飞机var vectorPlane = new BMap.Marker(new BMap.Point(point.lng+0.04,point.lat-0.03), &#123; // 初始化小飞机Symbol icon: new BMap.Symbol(BMap_Symbol_SHAPE_PLANE, &#123; scale: 2, // 矢量图标大小 strokeColor:&quot;#F6C081&quot;, rotation: 50, // 方向 fillColor:&quot;#F6C081&quot;, // 填充色 fillOpacity: 1 // 透明度 &#125;)&#125;);map.addOverlay(vectorPlane);// 向地图中添加单个覆盖物 2.设置覆盖物的文字标签123456789101112131415var point = new BMap.Point(point.lng, point.lat);// 设置坐标点var label = new BMap.Label(&quot;我是文字标注哦&quot;,&#123;offset:new BMap.Size(20,-10)&#125;);// 创建一个文本标注实例,offset:文本标注的位置偏移值label.setStyle(&#123;width: &quot;20px&quot;,height: &quot;20px&quot;,lineHeight: &quot;15px&quot;,textAlign: &quot;center&quot;,border: &apos;1px solid #000000&apos;,borderRadius: &quot;10px&quot;,&#125;);// 文字标签的样式设置marker.setLabel(label);// 为标注添加文本标注 3.信息窗口示例12345678910111213141516171819202122232425// 百度地图API功能var map = new BMap.Map(&quot;allmap&quot;);var point = new BMap.Point(116.417854,39.921988);var marker = new BMap.Marker(point); // 创建标注map.addOverlay(marker);// 将标注添加到地图中map.centerAndZoom(point, 15);var opts = &#123; width : 200, // 信息窗口宽度 height: 100, // 信息窗口高度 title : &quot;海底捞王府井店&quot; , // 信息窗口标题 enableMessage:true,//设置允许信息窗发送短息 message:&quot;亲耐滴，晚上一起吃个饭吧？戳下面的链接看下地址喔~&quot;&#125;var infoWindow = new BMap.InfoWindow(&quot;地址：北京市东城区王府井大街88号乐天银泰百货八层&quot;, opts);// 创建一个信息窗实例，其中content支持HTML内容marker.addEventListener(&quot;mouseover&quot;, function()&#123; map.openInfoWindow(infoWindow,point); //开启信息窗口&#125;);marker.addEventListener(&quot;mouseout&quot;, function()&#123; map.closeInfoWindow(infoWindow,point); //关闭信息窗口&#125;); 4.绘制折线123456789101112131415161718192021222324252627var map = new BMap.Map(&quot;allmap&quot;);map.centerAndZoom(new BMap.Point(116.404, 39.915), 15);map.enableScrollWheelZoom();var Symbol = new BMap.Symbol(BMap_Symbol_SHAPE_PLANE, &#123;scale: 2,strokeColor:&quot;#24B76E&quot;,rotation: 270,fillColor: &quot;#24B76E&quot;,fillOpacity: 1&#125;)//设置飞机矢量图 var iconSequence = new BMap.IconSequence(Symbol, &apos;10%&apos;, &apos;100%&apos;, false);//创建线上的符号类。 fixedRotation 图标的旋转角度是否与线走向一致var polyline = new BMap.Polyline([ new BMap.Point(116.399, 39.910), new BMap.Point(116.405, 39.920), new BMap.Point(116.423493, 39.907445) // 点的集合 ], &#123;strokeColor:&quot;blue&quot;, strokeWeight:2, // 折线样式设置 strokeOpacity:0.5, icons:[iconSequence] // 配置贴合折线的图标 &#125;); map.addOverlay(polyline); //增加折线","categories":[{"name":"百度地图API","slug":"百度地图API","permalink":"http://yoursite.com/categories/百度地图API/"}],"tags":[{"name":"百度地图API","slug":"百度地图API","permalink":"http://yoursite.com/tags/百度地图API/"}],"keywords":[{"name":"百度地图API","slug":"百度地图API","permalink":"http://yoursite.com/categories/百度地图API/"}]},{"title":"css3.0总结","slug":"css3-0总结","date":"2018-06-07T06:11:53.000Z","updated":"2018-06-22T08:42:03.874Z","comments":true,"path":"2018/06/07/css3-0总结/","link":"","permalink":"http://yoursite.com/2018/06/07/css3-0总结/","excerpt":"","text":"css3.0css3.0 在css的基础上新增加了一些属性以及用法 属性选择器E[attr] 只使用属性名，但没有确定任何属性值E[attr=”value”]指定属性名,并指定该属性的属性值E[attr~=”value”]指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的~不能不写E[attr^=”value”]指定属性名，并且具有属性值，属性值以value开头E[attr$=”value”]指定属性名，并且具有属性值，而且属性值是以value结束的E[attr*=”value”]指令了属性名,并且有属性值，而且属性值中包含了value值E[attr|=”value”]指定了属性名，并且有属性值是value或者是以‘vaule-’开头的值(zh-cn)E:nth-child(n) 表示E父元素中的第n个子节点p:nth-child(odd){background:red} // 匹配奇数行p:nth-child(even){background:red} // 匹配偶数行p:nth-child(2n){background:red}E:nth-last-child(n) 表示E父元素中的第n个字节点，从后向前计算E:nth-of-type(n) 表示E父元素中的第那个字节点，且类型为EE:nth-last-of-type(n) 表示E父元素中的第那个字节点，且类型为E，从后向前计算E:empty表示E元素中没有子节点，注意子节点包含文本节点E:first-child 表示E元素中的第一个子节点E:last-child 表示E元素中最后一个子节点E:first-of-type 表示E元素中的第一个子节点且节点类型是EE:last-of-type 表示E元素中的最后一个子节点且节点类型为EE:only-child 表示E元素中只有一个子节点，注意：子节点不包含文本节点E:only-of-type 表示E的父元素中只有一个子节点，且这个唯一的子节点类型必须为E，注意：子节点不包含文本节点E:target 表示当前的url片段的元素类型，这个元素必须是EE:disabled 表示不可点击的表单控件E:enabled 表示可点击的表单控件E:checked 表示已选中的checkbox或radioE:first-line 表示E元素中的第一行E:first-letter 表示E元素中的第一个字符E::selection 表示E元素在用户选中文字时E::before 生成内容在E元素前E::after 生成内容在E元素后E:not(s)表示E元素不被匹配E~F表示E元素毗邻的F元素content 属性 弹性盒模型任何一个容器都可以指定为Flex布局。123.box&#123; display: flex;&#125; 行内元素也可以使用Flex布局。123.box&#123; display: inline-flex;&#125; 同时需要注意，在不用的浏览器中，我们还需要在前面加上对应的浏览器前缀。1234.box&#123; display: -webkit-flex; /* Safari */ display: flex;&#125; 文字特效text-shadow: h-shadow v-shadow blur color;h-shadow：水平阴影的位置。允许负值v-shadow：垂直阴影的位置。允许负值blur：模糊的距离color：阴影的颜色 box-shadow: h-shadow v-shadow blur spread color inset;h-shadow：水平阴影的位置。允许负值v-shadow：垂直阴影的位置。允许负值。blur：可选。模糊距离。spread：可选。阴影的尺寸。color：可选。阴影的颜色inset：可选。将外部阴影 (outset) 改为内部阴影。box-shadow还支持多阴影，例 如：box-shadow: inset 0 0 1px #fff, inset 4px 4px 20px rgba(255,255,255,0.33), inset -2px -2px 10px rgba(255,255,255,0.25);所表示的 含义是，无偏移1像素模糊白色阴影重叠于左上角4像素偏移20像素模糊透明度0.33的白色内阴影再重叠于右下角偏移2像素，模糊10像素，透明度 0.25的白色内阴影。text-overflow:1234567891011div.test&#123; white-space:nowrap; width:12em; overflow:hidden; color:red; border:1px solid #000000; text-overflow:ellipsis; // text-overflow:clip; // text-overflow:&apos;--&apos;;&#125; 过渡和2D变化多样式设置：transition：1s width，2s 1s height，3s 2s backgroundtransition-property:要运动的样式 （all || [attr] || none）transition-duration:运动时间transition-delay:延迟时间transition-timing-function:运动形式(ease：（逐渐变慢）默认值linear：（匀速）ease-in：(加速)ease-out：（减速）ease-in-out：（先加速后减速）cubic-bezier 贝塞尔曲线（ x1, y1, x2, y2 ） http://matthewlein.com/ceaser/)过渡完成事件 :Webkit内核：obj.addEventListener(‘webkitTransitionEnd’,function(){},false);firefox:obj.addEventListener(‘transitionend’,function(){},false);2D变换transformrotate()： 旋转函数 取值度数transform-origin：原点，默认原点位于元素的X轴和Y轴的50%处123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119// 表盘效果&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;script src=&quot;jquery-1.10.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;style id=&quot;css&quot;&gt; #wrap&#123; width:200px; height:200px; -webkit-border-radius: 50%; -moz-border-radius: 50%; border-radius: 50%; border:2px solid #000; margin: 100px auto; position:relative; &#125; #wrap ul&#123; margin:0px; padding:0px; height:200px; list-style:none; position:relative; &#125; #wrap ul li&#123; width:2px; height:5px; background:#000; position:absolute; left:99px; top:0px; -webkit-transform-origin: center 100px; &#125; #wrap ul li:nth-child(1)&#123; -webkit-transform: rotate(0deg); &#125; #wrap ul li:nth-child(5n+1)&#123; height:10px; background:red; &#125; #hour&#123; width:6px; height: 45px; background:#000; position:absolute; left:97px; bottom:100px; -webkit-transform-origin:bottom; &#125; #min&#123; width:4px; height: 65px; background:green; position:absolute; left:98px; bottom:100px; -webkit-transform-origin:bottom; &#125; #sec&#123; width:2px; height: 85px; background:red; position:absolute; left:99px; bottom:100px; -webkit-transform-origin:bottom; &#125; #centre&#123; height:12px; width:12px; border-radius:50%; background:#000; position:absolute; left: 94px; bottom:94px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;ul id=&quot;list&quot;&gt; &lt;/ul&gt; &lt;div id=&quot;hour&quot;&gt;&lt;/div&gt; &lt;div id=&quot;min&quot;&gt;&lt;/div&gt; &lt;div id=&quot;sec&quot;&gt;&lt;/div&gt; &lt;div id=&quot;ico&quot;&gt;&lt;/div&gt; &lt;div id=&quot;centre&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;$(function()&#123; var ulHtml=&apos;&apos;; var sCss=&apos;&apos;; for(var i=0;i&lt;60;i++)&#123; sCss+=&apos; #wrap ul li:nth-child(&apos;+(i+1)+&apos;)&#123;-webkit-transform: rotate(&apos;+i*6+&apos;deg);&#125;&apos; ulHtml +=&apos;&lt;li&gt;&lt;/li&gt;&apos; &#125; $(&quot;#list&quot;).html(ulHtml); $(&quot;#css&quot;).append(sCss) var oHour=$(&quot;#hour&quot;); var oMin=$(&quot;#min&quot;); var oSec=$(&quot;#sec&quot;); toTime(oHour,oMin,oSec) setInterval(function()&#123; toTime(oHour,oMin,oSec); &#125;,1000) function toTime(oHour,oMin,oSec)&#123; var oDate=new Date(); var iSec=oDate.getSeconds(); var iMin=oDate.getMinutes()+iSec/60; var iHour=(oDate.getHours()%12)+iMin/60 oSec.css(&quot;-webkit-transform&quot;,&quot;rotate(&quot;+(iSec*360/60)+&quot;deg)&quot;); oMin.css(&quot;-webkit-transform&quot;,&quot;rotate(&quot;+(iMin*360/60)+&quot;deg)&quot;); oHour.css(&quot;-webkit-transform&quot;,&quot;rotate(&quot;+(iHour*360/12)+&quot;deg)&quot;); &#125;&#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; skew() ：倾斜函数 取值度数scale()：缩放函数 取值 正数、负数和小数translate()：位移函数transform-origin：right bottom 变换的基点值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;script src=&quot;jquery-1.10.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;style&gt; html&#123; height:100%; overflow:hidden; &#125; body&#123; background:#f9f9f9; &#125; #menu&#123; width:50px; height:50px; position:fixed; right:20px; bottom:20px; &#125; #menu_list&#123; height:42px; width:42px; position:relative; margin:4px; &#125; #menu_list img&#123; border-radius:21px; position:absolute; left:0; top:0; border-radius:21px; &#125; #home&#123; width:50px; height:50px; background:url(home.png) no-repeat; border-radius:25px; position:absolute; left:0; top:0; -webkit-transition:1s; -moz-transition: 1s; -ms-transition: 1s; -o-transition: 1s; transition: 1s; &#125; &lt;/style&gt; &lt;script&gt; $(function()&#123; var oBtn=$(&quot;#home&quot;); var aMenus=$(&quot;#menu_list img&quot;); var off=true; var iR=-150; oBtn.click(function()&#123; // 逆时针旋转360度 if(off)&#123; oBtn.css(&quot;-webkit-transform&quot;,&quot;rotate(-360deg)&quot;); //设置每一个导航的位置 for(var i=0;i&lt;aMenus.length;i++)&#123; var iDeg=(90/4)*i; var isLeftTop=toLT(iDeg,iR); var left=isLeftTop.i-21; var top=isLeftTop.t+21; aMenus.eq(i).css(&#123;&quot;transition&quot;:&quot;0.5s &quot;+i*100+&quot;ms&quot;,&quot;left&quot;:left+&quot;px&quot;,&quot;top&quot;:top+&quot;px&quot;,&quot;-webkit-transform&quot;:&quot;rotate(-720deg)&quot;&#125;) &#125; &#125;else&#123; // 顺时针旋转 oBtn.css(&quot;-webkit-transform&quot;,&quot;rotate(360deg)&quot;); for(var i=0;i&lt;aMenus.length;i++)&#123; aMenus.eq(i).css(&#123;&quot;transition&quot;:&quot;0.5s &quot;+(aMenus.length-1-i)*50+&quot;ms&quot;,&quot;left&quot;:&quot;0px&quot;,&quot;top&quot;:&quot;0px&quot;,&quot;-webkit-transform&quot;:&quot;rotate(0deg)&quot;&#125;) &#125; &#125; off=!off &#125;) for(var i=0;i&lt;aMenus.length;i++)&#123; aMenus.eq(i).click(function()&#123; $(this).css(&#123;&quot;transition&quot;:&quot;0.5s&quot;,&quot;-webkit-transform&quot;:&quot;scale(2)&quot;,&quot;opacity&quot;:&quot;0.5&quot;&#125;); // 完成过渡效果后的修改 $(this).bind(&quot;transitionend&quot;, end); &#125;) &#125; // 计算图标的位置 function toLT(iDeg,iR)&#123; var isLeft=Math.round(Math.sin(iDeg/180*Math.PI)*iR) var isTop=Math.round(Math.cos(iDeg/180*Math.PI)*iR) return &#123;i:isLeft,t:isTop&#125; &#125; // 完成过渡效果后的样式调整 function end()&#123; $(this).css(&#123;&quot;transition&quot;:&quot;0.1s&quot;,&quot;-webkit-transform&quot;:&quot;scale(1)&quot;,&quot;opacity&quot;:&quot;1&quot;&#125;); &#125; &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;menu&quot;&gt; &lt;div id=&quot;menu_list&quot;&gt; &lt;img src=&quot;prev.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;open.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;clos.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;full.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;refresh.png&quot; alt=&quot;&quot; /&gt; &lt;/div&gt; &lt;div id=&quot;home&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; matrix：矩阵matrix（a,b,c,d,e,f)位移：x轴的位移：e+disXY轴的位移：f+disY 动画关键帧的写法12345@keyframes miaov_test&#123; from &#123; background:red; &#125; to &#123; background:green; &#125;&#125; 折纸效果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;style&gt; @-webkit-keyframes open&#123; 0% &#123; -webkit-transform:rotateX(-120deg); &#125; 25% &#123; -webkit-transform:rotateX(30deg); &#125; 50% &#123; -webkit-transform:rotateX(-15deg); &#125; 75% &#123; -webkit-transform:rotateX(8deg); box-shadow:inset 0 0 0 0 #ccc; &#125; 100% &#123; -webkit-transform:rotateX(0deg); &#125; &#125; @-webkit-keyframes hide&#123; 0% &#123; -webkit-transform:rotateX(0deg); &#125; 100% &#123; -webkit-transform:rotateX(-120deg); &#125; &#125; *&#123; padding:0px; margin:0px; &#125; .wrap&#123; width:240px; margin:0 auto; position:relative; /* 设置3D效果 */ -webkit-perspective:800px; &#125; .wrap h3&#123; width:240px; height:40px; background:#f60; color:#fff; line-height:40px; text-align:center; position:relative; z-index:10; &#125; .wrap div&#123; position:absolute; top:30px; left:0; -webkit-transform-style:preserve-3d; width:100%; -webkit-transform-origin:top; -webkit-transform:rotateX(-120deg); z-index:1; &#125; .wrap&gt;div:nth-of-type(1)&#123; top:40px; &#125; .wrap span&#123; width:240px; display:block; height:28px; background:#CF3; color:#fff; font:14px/28px &quot;宋体&quot;; text-indent:20px; box-shadow:inset 0 0 100px 20px rgba(0,0,0,0.2); &#125; .wrap .open&#123; -webkit-transform:rotateX(0deg); -webkit-animation:1.5s open ease; &#125; .wrap .open&gt;span&#123; box-shadow:inset 0 0 100px 20px rgba(0,0,0,0); &#125; .wrap .close&#123; -webkit-transform:rotateX(-120deg); -webkit-animation:0.5s hide ease; &#125; .wrap .close&gt;span&#123; box-shadow:inset 0 0 100px 20px rgba(0,0,0,0.5); &#125; #btn&#123; position:absolute; left:0; top:0; width:100px; height:30px; transition:1s; &#125; &lt;/style&gt; &lt;script&gt; window.onload=function() &#123; var oBtn=document.getElementById(&quot;btn&quot;); var oWrap=document.getElementById(&quot;wrap&quot;); var aDiv=oWrap.getElementsByTagName(&quot;div&quot;); var i=0; var oTimer=null; var iDelay=200; var Boff=true; oBtn.onclick=function()&#123; oBtn.style.left=&quot;-300px&quot;; if(Boff)&#123; // 开启计时器 i=0; oTimer=setInterval(function()&#123; aDiv[i].className=&quot;open&quot;; if(i==aDiv.length-1) &#123; // 关闭计时器 clearInterval(oTimer); oBtn.style.left=&quot;0px&quot;; oBtn.value=&quot;关闭&quot;; &#125; i++; &#125;,iDelay) &#125;else&#123; // 收起此效果 i=aDiv.length-1; oTimer=setInterval(function()&#123; aDiv[i].className=&quot;close&quot;; if(i==0) &#123; // 关闭计时器 clearInterval(oTimer); oBtn.style.left=&quot;0px&quot;; oBtn.value=&quot;展开&quot;; &#125; i--; &#125;,iDelay) &#125; Boff=!Boff; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;展开&quot; id=&quot;btn&quot; /&gt; &lt;div id=&quot;wrap&quot; class=&quot;wrap&quot;&gt; &lt;h3&gt;这是标题&lt;/h3&gt; &lt;div&gt; &lt;span&gt; 选项1 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项2 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项3 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项4 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项5 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项6 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项7 &lt;/span&gt; &lt;div&gt; &lt;span&gt; 选项7 &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[],"keywords":[]},{"title":"BlueLake博客主题的详细配置","slug":"BlueLake博客主题的详细配置","date":"2018-05-08T08:21:50.000Z","updated":"2018-05-08T09:05:38.242Z","comments":true,"path":"2018/05/08/BlueLake博客主题的详细配置/","link":"","permalink":"http://yoursite.com/2018/05/08/BlueLake博客主题的详细配置/","excerpt":"","text":"开始之前BlueLake主题写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。 在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 1. 安装您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。 1.1 安装主题在根目录下打开终端窗口： git bash1$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2 安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。 git bash12$ npm install hexo-renderer-jade@0.3.0 –save$ npm install hexo-renderer-stylus –save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。 根_config.yml_config.yml1theme: BlueLake 1.4 验证首先启动 Hexo 本地站点，并开启调试模式： git bash1$ hexo s –debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 1.5 更新主题今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。 git bash12cd themes/BlueLakegit pull 2. 配置2.1 配置网站头部显示文字打开根_config.yml，找到： 根_config.yml_config.yml1234title: subtitle: description: author: title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2.2 设置语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下： 根_config.yml_config.yml1language: zh-CN 2.3 设置菜单打开主题_config.yml，找到： 主题_config.ymlthemes/BlueLake/_config.yml12345678910111213menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive # - page: about # directory: about/ # icon: fa-user - page: rss directory: atom.xml icon: fa-rss 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好： 主题_config.ymlthemes/BlueLake/_config.yml12345# About page about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 2.3.1 添加about页此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面： git bash1$ hexo new page ‘about’ 打开主题_config.yml，补全关于我页面的详细信息： 主题_config.ymlthemes/BlueLake/_config.yml12345678# About page about: photo_url: ## 头像的链接地址 email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 weibo_name: ## 微博用户名 github_url: ## github主页链接地址 github_name: ## github用户名 当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件在根目录下打开命令行窗口： git bash123$ npm install hexo-generator-feed –save$ npm install hexo-generator-sitemap –save$ npm install hexo-generator-baidu-sitemap –save 添加主题_config.yml配置： 主题_config.ymlthemes/BlueLake/_config.yml1234567891011121314Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemapfeed: type: atom path: atom.xml limit: 20sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 2.4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： git bash1$ npm install hexo-generator-json-content@2.2.0 –save 然后在根_config.yml添加配置： 根_config.yml_config.yml123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 主题_config.ymlthemes/BlueLake/_config.yml1local_search: true 2.5 修改站点图标站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。(有很多网站都可以在线生成ico格式的图片。) 2.6 添加站点关键字请在hexo目录的根_config.yml中添加keywords字段，如： 根_config.yml_config.yml1234567# Sitetitle: Hexosubtitle: 副标题description: 网站简要描述,如：Charles·Zheng‘s blog.keywords: 网站关键字, key, key1, key2, key3author: Charleslanguage: zh-CN 2.7 其他配置主题_config.yml的其他配置 show_category_count——是否显示分类下的文章数。 widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。主题_config.ymlthemes/BlueLake/_config.yml 12show_category_count: true widgets_on_small_screens: true 3.集成第三方服务3.1 添加评论目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。 注册并获得代码。 * 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。 若使用Disqus评论，注册Disqus后获得short_name。 若使用来必力评论，注册来必力,获得data-uid。 若使用友言评论，注册友言,获得uid。 若使用网易云跟帖评论，注册网易云跟帖,获得productKey。 若使用畅言评论，注册畅言，获得appid，appkey。 配置主题_config.yml：主题_config.ymlthemes/BlueLake/_config.yml12345678910#Cmmentscomment: duoshuo: ## duoshuo_shortname disqus: ## disqus_shortname livere: ## 来必力(data-uid) uyan: ## 友言(uid) cloudTie: ## 网易云跟帖(productKey) changyan: ## 畅言需在下方配置两个参数，此处不填。 appid: ## 畅言(appid) appkey: ##畅言(appkey) 3.2 百度统计 登录百度统计，定位到站点的代码获取页面。 复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000) 配置主题_config.yml:主题_config.ymlthemes/BlueLake/_config.yml 1baidu_analytics: 8006843039519956000 注意： baidu_analytics不是你的百度id或者百度统计id如若使用谷歌统计，配置方法与百度统计类似。 3.3 卜算子阅读次数统计主题_config.ymlthemes/BlueLake/_config.yml1busuanzi: true 若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。 3.4 微博秀微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。 登录微博开放平台，选择微博秀。 为了与主题风格统一，作如下配置 * 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`； 样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8； 模块设置：去掉标题、边框、粉丝的勾选框，只留微博。 复制代码里src=&quot;&quot;里引号包裹的内容，替换到layout/_widget/weibo.jadeweibo.jadelayout/_widget/weibo.jade1234.widget .widget-title i(class=‘fa fa-weibo’)= ‘ ‘ + __(‘新浪微博’) iframe(width=“100%”,height=“400”,class=“share_self”,frameborder=“0”,scrolling=“no”,src=“http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)这只是为了和主题的风格统一，当然您也可以自由随意发挥。&gt; 注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。","categories":[],"tags":[],"keywords":[]},{"title":"ngrok的基本使用","slug":"ngrok的基本使用","date":"2018-05-03T06:15:33.000Z","updated":"2018-06-15T07:05:41.933Z","comments":true,"path":"2018/05/03/ngrok的基本使用/","link":"","permalink":"http://yoursite.com/2018/05/03/ngrok的基本使用/","excerpt":"","text":"1.把项目放到tomcat启动（即点击startup.bat）tomcat将项目放到tomcat下 启动tomcat 2.打开https://www.ngrok.cc/打开https://www.ngrok.cc/，登录系统，设置相关信息。 3.通过cmd进入客户端根目录（即sunny.exe所在目录），启动sunny.exe找到Sunny.exe所在的根目录 通过cmd进行启动，sunny.exe clientid id（https://www.ngrok.cc/ 网站上面的id） 4.外网访问（即：第三步，窗口看到的ip就是外网ip）红色线部分是指IP，http://xiuxiu.free.ngrok.cc/dist/index.html ，dist是指项目名称，index.html页面。","categories":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}],"tags":[{"name":"ngrok的使用","slug":"ngrok的使用","permalink":"http://yoursite.com/tags/ngrok的使用/"}],"keywords":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}]},{"title":"Vue.js的基本使用","slug":"Vue-js的基本使用","date":"2018-04-20T09:11:46.000Z","updated":"2018-05-16T09:25:16.556Z","comments":true,"path":"2018/04/20/Vue-js的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/20/Vue-js的基本使用/","excerpt":"","text":"路由的使用 安装路由模块 1Npm install vue-router --save 引入模块 1import VueRouter from ‘vue-router’ 作为vue的插件 1Vue.use(VueRouter) 创建路由实例对象 123New VueRouter(&#123;...配置参数&#125;) 注入vue选项参数 123New Vue(&#123;router&#125;) 告诉路由渲染的位置 1&lt;router-view&gt;&lt;/router-view&gt; Hash 和 History 模式vue-router默认 hash 模式 “#” url的hash模式，mode:history模式就是正常的路径模式,history带来的便利是可以使用浏览器的前进后退功能 123456789101112131415161718192021export default new Router(&#123; mode: &apos;history&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) router-link的各项配置router-link 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 a 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名 1234&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; to：目标路由的链接，此链接可以进行动态绑定的，tag：渲染成某种标签，如:li,event:默认为点击事件，也可以将其设置为鼠标移入的事件，mouseover 12345678910111213141516&lt;router-link :to=&apos;index&apos; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt;&lt;script&gt;export default &#123; name: &apos;App&apos;, data () &#123; return &#123; index: &apos;/home&apos; &#125; &#125;&#125;&lt;/script&gt; active-class：设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置 123456789101112131415161718192021222324252627282930313233//路由中设置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;)//组件中进行设置&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; 重定向和别名1234567891011121314151617181920212223242526272829303132333435363738394041424344export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125;, // 如果没有以上的地址，就将跳转到home页面 &#123; path: &apos;*&apos;, // component: Home // redirect: &apos;/home&apos; // redirect:&#123;path: &apos;/home&apos;&#125; // redirect:&#123;name: &apos;Home&apos;&#125; // 动态设置重定向的目标路径 redirect: (to) =&gt; &#123; // 目标路由对象，就是访问的路径的路由信息 if (to.path === &apos;/123&apos;) &#123; return &apos;/home&apos; &#125; else if (to.path === &apos;/456&apos;) &#123; return &#123;path: &apos;/doc&apos;&#125; &#125; else &#123; return &#123;name: &apos;Project&apos;&#125; &#125; // return &apos;/home&apos; &#125; &#125; ]&#125;) 嵌套路由使用exact：”是否激活” 默认类名的依据是 inclusive match （全包含匹配） 1234&lt;router-link to=&apos;/&apos; exact tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt; 子路由的配置 12345678910111213141516171819202122232425262728293031323334353637383940414243export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, // 默认子路由，有默认子路由就不要再父路由中设置name属性 component: study &#125;, &#123; path: &apos;work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 命名视图子路径的格式为：http://localhost:8081/work，即在子路径中加了/，就相对于跟路径来说的，子路径不需要嵌套，但是组件需要嵌套的。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//vue页面的写法，动态的绑定路径&lt;ul class=&quot;nav&quot;&gt; &lt;router-link :to=&quot;&#123;name: &apos;Project&apos;&#125;&quot; exact tag=&apos;li&apos;&gt; &lt;a&gt;study&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;work&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;work&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;hobby&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;hobby&lt;/a&gt; &lt;/router-link&gt;&lt;/ul&gt;//路由的配置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 多个router-view的应用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//app.vue&lt;router-view name=&quot;slider&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;//路由中的配置，一个路径对应一个组件用component，一个路径对应多个组件，用Components，默认的组件用default，其他的组件用router-view中name的值export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, components: &#123; default: Document, slider: slider &#125; &#125; ]&#125;) 动态路径匹配到的所有路由，全都映射到同一个组件路径:/user/:userId,userId为动态路径参数 获取参数：路由信息对象的params 监控 $route 路由信息对象$router router 实例对象$route 当前激活的路由信息对象，每个组件实例都会有路由信息对象（一个路由信息对象表示当前激活的路由的状态信息，每次成功的导航后都会产生一个新的对象） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;script&gt;let data = [ &#123; id: 1, tip: &apos;vip&apos;, userName: &apos;leo1&apos;, sex: &apos;男&apos;, hobby: &apos;写代码&apos; &#125;, &#123; id: 2, tip: &apos;vip&apos;, userName: &apos;leo2&apos;, sex: &apos;男&apos;, hobby: &apos;唱歌&apos; &#125;, &#123; id: 3, tip: &apos;common&apos;, userName: &apos;leo3&apos;, sex: &apos;男&apos;, hobby: &apos;读书&apos; &#125;]export default&#123; data () &#123; return &#123; userList: data, userInfo: &#123;&#125; &#125; &#125;, // 如何知道路由对象发生了变化,通过watch的方法监控route的变化 watch: &#123; $route () &#123; // 路径发生变化，$route会重新赋值，监控这个属性，会执行这个函数 this.getData() &#125; &#125;, // 生命周期，编译之前,刚生成的时候执行created，后来不会重新生成，就不会执行钩子函数 created () &#123; // 渲染这个组件会调用一次这个生命周期函数 // 复用这个组件，这个函数不会再次被调用的 // 地址一旦发生变化，$route 会重新生成一个路由信息对象 this.getData() &#125;, // 将公共的方法放入到methods函数中 methods: &#123; getData () &#123; let id = this.$route.params.userId if (id) &#123; this.userInfo = this.userList.filter((item) =&gt; &#123; return parseInt(item.id) === parseInt(id) &#125;)[0] &#125; else &#123; this.userInfo = &#123;&#125; &#125; &#125; &#125;&#125;&lt;/script&gt; beforeRouterEnter() 进入组件的勾子函数 Query 字符串传参1234567&lt;div class=&quot;info-list&quot; style=&quot;font-size:20px;&quot; v-if=&quot;userInfo.userName&quot;&gt; &lt;router-link exact :to=&quot;&#123;path:&apos;&apos;,query:&#123;info:&apos;follow&apos;&#125;&#125;&quot;&gt;我的关注&lt;/router-link&gt; &lt;router-link exact :to=&quot;&#123;path:&apos;&apos;,query:&#123;info:&apos;share&apos;&#125;&#125;&quot;&gt;我的分享&lt;/router-link&gt; &lt;div &gt; &#123;&#123;$route.query&#125;&#125; &lt;/div&gt;&lt;/div&gt; 过渡动效提供了transition的封装组件，添加过渡动画，添加删除css类名v-enter:定义进入过渡的开始状态v-enter-active:定义进入活动状态v-enter-to:定义进入的结束状态v-leave:定义李凯过渡的开始状态v-leave-active:定义离开活动状态v-leave-to:定义离开的结束状态 过渡模式： in-out：新元素先进行过去，完成之后当前元素过渡离开out-in:当前元素进行过渡，完成之后新元素过渡进入 1234567891011121314151617181920212223&lt;transition mode=&quot;out-in&quot;&gt; &lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;&lt;/transition&gt;&lt;style&gt;.v-enter&#123;opacity:0;&#125;.v-enter-to&#123;opacity:1;&#125;.v-enter-active&#123;transition:1s;&#125;.v-leave&#123;opacity:1;&#125;.v-leave-to&#123;opacity:0;&#125;.v-leave-active&#123;transition:2s;&#125;&lt;/style&gt; 动态设置name属性左右切换自定义设置transition的效果 1234567891011121314151617181920212223&lt;transition name=&quot;left&quot;&gt; &lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;&lt;/transition&gt;&lt;style&gt;.left-enter&#123;transform:translateX(100%)&#125;.left-enter-to&#123;transform:translateX(0)&#125;.left-enter-active&#123;transition:1s;&#125;.left-leave&#123;transform:translateX(0)&#125;.left-leave-to&#123;transform:translateX(-100%)&#125;.left-leave-active&#123;transition:1s;&#125;&lt;/style&gt; 动态设置name属性左右切换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293// vue页面的设置&lt;transition :name=&quot;names&quot;&gt; &lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;&lt;/transition&gt;// js中的设置export default &#123; name: &apos;App&apos;, data () &#123; return &#123; index: &apos;/home&apos;, names: &apos;names&apos; &#125; &#125;, watch: &#123; $route (to, from) &#123; if (to.meta.index &lt; from.meta.index) &#123; console.info(to.meta.index + &apos;===&apos;) this.names = &apos;right&apos; &#125; else &#123; console.info(to.meta.index + &apos;===&apos;) this.names = &apos;left&apos; &#125; &#125; &#125; &#125; // router文件夹下面的 index.js 的设置routes: [ &#123; path: &apos;/&apos;, component: Home, meta: &#123; index: 0 &#125; &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos;, meta: &#123; index: 0 &#125; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study, meta: &#123; index: 1 &#125; &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, components: &#123; default: Document, slider: slider &#125;, meta: &#123; index: 2 &#125; &#125;, &#123; path: &apos;/user/:tip?/:userId?&apos;, name: &apos;user&apos;, component: user, meta: &#123; index: 3 &#125; &#125; &#125; ] 编程式导航借助于router的实例方法，通过编写代码来实现导航的切换back 回退一步forward 前进一步go 指定前进后退步数push 导航到不同url，向history栈添加一个新的记录replace 导航到不同url，替换history栈中当前记录 1234567891011121314151617181920212223242526272829303132// vue 页面的写法&lt;input type=&quot;button&quot; value=&quot;后退&quot; @click=&quot;backHandle&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;前进&quot; @click=&quot;forwardHandle&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;控制前进后退的步数&quot; @click=&quot;goHandle&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;控制导航的指定push&quot; @click=&quot;pushHandle&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;控制导航的指定replace&quot; @click=&quot;replaceHandle&quot; /&gt;// js 页面的写法 methods: &#123; backHandle () &#123; console.info(&apos;后退&apos;) this.$router.back() &#125;, forwardHandle () &#123; console.info(&apos;前进&apos;) this.$router.forward() &#125;, goHandle () &#123; // 前进 为正数，后退为负数 this.$router.go(2) &#125;, pushHandle () &#123; // 前进 为正数，后退为负数 this.$router.push(&#123;path: &apos;/doc&apos;&#125;) &#125;, replaceHandle () &#123; // 前进 为正数，后退为负数 this.$router.replace(&#123;path: &apos;/doc&apos;&#125;) &#125; &#125; 导航钩子函数 导航发生变化时，导航钩子主要用来拦截导航，让它完成跳转或取消 执行钩子函数位置 router全局 单个路由 组件中 钩子函数 router实例上：beforsEach，afterEach 单个路由中：beforeEnter 组件内的钩子：beforeRouterEnter，beforeRouterUpdate，beforeRouterLeave 钩子函数接收的参数 to：要进入的目标路由对象，到哪里去 from：正要离开导航的路由对象，从哪儿来 next：用来决定跳转或取消导航 123456789101112131415161718// 切换不同的导航，钩子函数都会被执行router.beforeEach((to, from, next) =&gt; &#123;console.log(&apos;beforeEach&apos;)// 想要进入导航必须要执行以下next(),next(false)if(to.meta.login) &#123; next(&apos;/login&apos;)&#125; else &#123; next()&#125;&#125;)// 移入不同导航时，需要修改页面的title值router.afterEach((to, from) =&gt; &#123;if(to.meta.title) &#123; window.document.title = to.meta.title&#125; else &#123; window.document.title = &apos;peixiu&apos;&#125;&#125;) 单个路由设置 12345678910111213routes: [ &#123; path: &apos;/&apos;, component: Home, beforeEnter (to, from, next) &#123; if (to.meta.login) &#123; next(&apos;/login&apos;) &#125; else &#123; next() &#125; &#125;&#125;]","categories":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}],"tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"}],"keywords":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}]},{"title":"vuex中store的用法","slug":"vuex中store的用法","date":"2018-04-20T02:04:16.000Z","updated":"2018-05-24T06:17:57.489Z","comments":true,"path":"2018/04/20/vuex中store的用法/","link":"","permalink":"http://yoursite.com/2018/04/20/vuex中store的用法/","excerpt":"","text":"本篇文章主要介绍了Vuex之理解Store的用法，Store类就是存储数据和管理数据方法的仓库，实现方式是将数据和方法已对象形式传入其实例中 1.什么是Store？Vuex就是提供一个仓库，Store仓库里面放了很多对象。其中state就是数据源存放地，对应于与一般Vue对象里面的data（后面讲到的actions和mutations对应于methods）。在使用Vuex的时候通常会创建Store实例new Vuex.store({state,getters,mutations,actions})有很多子模块的时候还会使用到modulesStore类就是存储数据和管理数据方法的仓库，实现方式是将数据和方法已对象形式传入其实例中。要注意一个应用或是项目中只能存在一个Store实例！！ 3.store.js的核心状态管理有5个核心，分别是state、getter、mutation、action以及module。分别简单的介绍一下它们： 1) statestate为单一状态树，在state中需要定义我们所需要管理的数组、对象、字符串等等，只有在这里定义了，在vue.js的组件中才能获取你定义的这个对象的状态。 2) gettergetter有点类似vue.js的计算属性，当我们需要从store的state中派生出一些状态，那么我们就需要使用getter，getter会接收state作为第一个参数，而且getter的返回值会根据它的依赖被缓存起来，只有getter中的依赖值（state中的某个需要派生状态的值）发生改变的时候才会被重新计算。 3) mutation更改store中state状态的唯一方法就是提交mutation，就很类似事件。每个mutation都有一个字符串类型的事件类型和一个回调函数，我们需要改变state的值就要在回调函数中改变。我们要执行这个回调函数，那么我们需要执行一个相应的调用方法：store.commit。 4) action action可以提交mutation，在action中可以执行store.commit，而且action中可以有任何的异步操作。在页面中如果我们要使用这个action，则需要执行store.dispatch 5) modulemodule其实只是解决了当state中很复杂臃肿的时候，module可以将store分割成模块，每个模块中拥有自己的state、mutation、action和getter。 2.store.js的写法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import Vue from &apos;vue&apos;import Vuex from &apos;vuex&apos;Vue.use(Vuex)let store = new Vuex.Store(&#123; state: &#123; carPanelData: [], maxOff: false, // 是否为最大值,为最大值的时候弹出对话框 carShow: false, // 购物车是否隐藏 carTimer: null, // 创建一个小球，记录相关的信息 ball: &#123; show: false, // 哪一个按钮 el: null, // 图片地址 img: &apos;&apos; &#125; &#125;, getters: &#123; totalCount: function (state) &#123; let count = 0 state.carPanelData.forEach((goods) =&gt; &#123; count += goods.count &#125;) return count &#125;, totalPrice: function (state) &#123; let price = 0 state.carPanelData.forEach((goods) =&gt; &#123; price += goods.count * goods.price &#125;) return price &#125; &#125;, // 建立一个方法 mutations: &#123; addCarPanelData: function (state, data) &#123; let boff = true state.carPanelData.forEach((goods) =&gt; &#123; if (goods.sku_id === data.sku_id) &#123; goods.count++ boff = false if (goods.count &gt; goods.limit_num) &#123; goods.count-- state.maxOff = true return false &#125; /* state.ball.el = event.path[0] */ /* state.ball.show = true state.ball.img = data[0].ali_image boff = false */ console.log(event) // 加成功后显示弹出框 state.carShow = true &#125; &#125;) if (boff) &#123; let goodsData = data Vue.set(goodsData, &apos;count&apos;, 1) state.carPanelData.push(goodsData) // 加成功后显示弹出框 state.carShow = true // event 存在浏览器的兼容性问题 /* state.ball.el = event.path[0] */ /* state.ball.show = true state.ball.img = data[0].ali_image boff = false */ console.log(event) &#125; &#125;, deleteCarPanelData: function (state, id) &#123; state.carPanelData.forEach((goods, index) =&gt; &#123; if (goods.sku_id === id) &#123; state.carPanelData.splice(index, 1) return false &#125; &#125;) &#125;, closePrompt: function (state) &#123; state.maxOff = false &#125;, alertPrompt: function (state) &#123; state.maxOff = true &#125;, showCar: function (state) &#123; clearTimeout(state.carTimer) state.carShow = true &#125;, hideCar: function (state) &#123; state.carTimer = setTimeout(() =&gt; &#123; state.carShow = false &#125;, 500) &#125; &#125;&#125;)export default store","categories":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}],"tags":[{"name":"vuex中store的用法","slug":"vuex中store的用法","permalink":"http://yoursite.com/tags/vuex中store的用法/"}],"keywords":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}]},{"title":"markdown的语法","slug":"markdown的语法","date":"2018-04-20T02:04:16.000Z","updated":"2018-05-08T02:50:45.570Z","comments":true,"path":"2018/04/20/markdown的语法/","link":"","permalink":"http://yoursite.com/2018/04/20/markdown的语法/","excerpt":"","text":"斜体和粗体1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ 分级标题1234567891011这是一个一级标题============================这是一个二级标题--------------------------------------------------# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 超链接语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接文字’这样的形式。链接地址与链接标题前有一个空格。 12欢迎来到[梵居闹市](http://blog.leanote.com/freewalk)欢迎来到[梵居闹市](http://blog.leanote.com/freewalk &quot;梵居闹市&quot;) 列表使用 *，+，- 表示无序列表。 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 引用 语法说明： 引用需要在被引用的文本前加上&gt;符号。 123456&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4 插入图像1![图片Alt](图片地址 “图片Title”) 表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐 12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 分隔线12345* * *********- - ---------------------------------------- 代码语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者“code “,具体看示例。 1C语言里的函数 `scanf()` 怎么使用？ 首行缩进123半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; 锚点语法描述：在你准备跳转到的指定标题后插入锚点，然后在文档的其它地方写上连接到锚点的链接 12## 0. 目录&#123;#index&#125;跳转到[目录](#index)","categories":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}],"tags":[{"name":"markdown的语法","slug":"markdown的语法","permalink":"http://yoursite.com/tags/markdown的语法/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}]},{"title":"vuejs项目的下载","slug":"vuejs项目的下载","date":"2018-04-20T02:04:16.000Z","updated":"2018-04-20T08:02:54.388Z","comments":true,"path":"2018/04/20/vuejs项目的下载/","link":"","permalink":"http://yoursite.com/2018/04/20/vuejs项目的下载/","excerpt":"","text":"下载项目： 进入到需要下载vue的文件夹中 vue init webpack MyPrj(打包) 进入目录，安装依赖，cd MyPrj,npm install 运行项目npm run dev","categories":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}],"tags":[{"name":"vuejs项目的下载","slug":"vuejs项目的下载","permalink":"http://yoursite.com/tags/vuejs项目的下载/"}],"keywords":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}]},{"title":"vue项目实战","slug":"vue项目实战","date":"2018-04-20T02:04:16.000Z","updated":"2018-06-15T07:04:33.550Z","comments":true,"path":"2018/04/20/vue项目实战/","link":"","permalink":"http://yoursite.com/2018/04/20/vue项目实战/","excerpt":"","text":"本篇文章主要介绍了vue的环境配置,vue项目的目录结构以及在开发vue项目中问题的一些解决方案。 环境配置及目录结构1.安装node.js(http://www.runoob.com/nodejs/nodejs-install-setup.html)2.基于node.js,利用淘宝npm镜像安装相关依赖 在cmd里直接输入：npm install -g cnpm –registry=https://registry.npm.taobao.org，回车，等待安装...3.安装全局vue-cli脚手架,用于帮助搭建所需的模板框架 在cmd里 1)输入：cnpm install -g vue-cli，回车，等待安装… 2).输入：vue，回车，若出现vue信息说明表示成功4.创建项目在cmd里输入：vue init webpack vue_test(项目文件夹名)，回车，等待一小会儿，依次出现‘git’下的项，可按下图操作5.安装依赖 在cmd里 1).输入：cd vue_test（项目名），回车，进入到具体项目文件夹 2).输入：cnpm install，回车，等待一小会儿 回到项目文件夹，会发现项目结构里，多了一个node_modules文件夹（该文件里的内容就是之前安装的依赖） 基于脚手架创建的默认项目结构如下图所示： 6.测试环境是否搭建成功 方法1：在cmd里输入：cnpm run dev 方法2：在浏览里输入：localhost:8080(默认端口为8080) 运行起来后的效果如下图所示： 项目的目录结构： assets：主要放置样式文件和图片 components：组件 lib：放置模拟好的数据 router：放置路由信息 store：放置vuex的文件 views：放置所有的单页面 使用Vuex步骤1.使用npm安装： npm install vuex –save2.引入vuex插件创建文件夹store，新建index.js，import Vue和Vuex，Vue的插件引入函数Vue.use()使用Vuex,Vue.use(Vuex)store/index.js1234import Vue from &apos;vue&apos;import Vuex from &apos;vuex&apos;Vue.use(Vuex)let store = new Vuex.Store(&#123;&#125;) main.js中引入store，在Vue实例中注册store对象12345678910111213import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import store from &apos;./store&apos;Vue.config.productionTip = falsenew Vue(&#123; el: &apos;#app&apos;, router, store, template: &apos;&lt;App/&gt;&apos;, components: &#123; App &#125;&#125;) 3.将状态映射到组件store/index.js123456789101112131415161718192021222324252627282930313233343536import Vue from &apos;vue&apos;import Vuex from &apos;vuex&apos;Vue.use(Vuex)let store = new Vuex.Store(&#123; state: &#123; receiveInfo: [&#123; &apos;name&apos;: &apos;王某某&apos;, &apos;phone&apos;: &apos;13811111111&apos;, &apos;areaCode&apos;: &apos;010&apos;, &apos;landLine&apos;: &apos;64627856&apos;, &apos;provinceId&apos;: 110000, &apos;province&apos;: &apos;北京市&apos;, &apos;cityId&apos;: 110100, &apos;city&apos;: &apos;市辖区&apos;, &apos;countyId&apos;: 110106, &apos;county&apos;: &apos;海淀区&apos;, &apos;add&apos;: &apos;上地十街辉煌国际西6号楼319室&apos;, &apos;default&apos;: true, &apos;checked&apos;: true &#125;, &#123; &apos;name&apos;: &apos;李某某&apos;, &apos;phone&apos;: &apos;13811111111&apos;, &apos;areaCode&apos;: &apos;010&apos;, &apos;landLine&apos;: &apos;64627856&apos;, &apos;provinceId&apos;: 110000, &apos;province&apos;: &apos;北京市&apos;, &apos;cityId&apos;: 110100, &apos;city&apos;: &apos;市辖区&apos;, &apos;countyId&apos;: 110106, &apos;county&apos;: &apos;海淀区&apos;, &apos;add&apos;: &apos;上地十街辉煌国际东6号楼350室&apos;, &apos;default&apos;: false, &apos;checked&apos;: false &#125;] &#125;&#125;) 组件中修改状态1234567export default &#123; computed: &#123; receiveInfo: function () &#123; return this.$store.state.receiveInfo &#125; &#125;&#125; getters:过滤state数据mutations:显式的更改state里的数据 vue中关于props和$emit的用法1.父组件可以使用props把数据传给子组件props是父组件用来传递数据的一个自定义属性。父组件的数据需要通过props把数据传递给子组件，子组件需要显示地用props选项声明props父组件1&lt;address-pop v-if=&quot;popShow&quot; @close=&quot;closePop&quot; :oldReceive=&quot;oldReceive&quot;&gt;&lt;/address-pop&gt; 子组件12345678props: &#123; oldReceive: &#123; type: Object &#125;, receiveIndex: &#123; type: Number &#125;&#125; 2.子组件可以使用$emit触发父组件的自定义事件父组件定义了一个close事件，在子组件中直接通过this.$emit(‘close’)调用父组件中的close方法父组件12345678910111213&lt;address-pop v-if=&quot;popShow&quot; @close=&quot;closePop&quot; :oldReceive=&quot;oldReceive&quot;&gt;&lt;/address-pop&gt;&lt;script&gt;import addressPop from &apos;@/components/address-pop&apos;export default &#123;components: &#123; addressPop&#125;,methods: &#123; closePop: function () &#123; this.popShow = false &#125;&#125;&#125; 子组件1234567&lt;span class=&quot;dialog-close&quot; @click=&quot;closePop&quot;&gt;x&lt;/span&gt;export default &#123;methods: &#123; closePop: function () &#123; this.$emit(&apos;close&apos;)&#125;&#125;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}],"tags":[{"name":"vue项目实战","slug":"vue项目实战","permalink":"http://yoursite.com/tags/vue项目实战/"}],"keywords":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}]},{"title":"Hexo的基本使用","slug":"Hexo的基本使用","date":"2018-04-18T09:09:08.000Z","updated":"2018-09-25T09:13:59.614Z","comments":true,"path":"2018/04/18/Hexo的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/18/Hexo的基本使用/","excerpt":"","text":"Hexo相关的网站https://hexo.io/zh-cn/docs/commands.html Hexo 的安装npm install hexo-cli g Hexo 环境变量的配置 Hexo命令123456hexo new [layout] &lt;title&gt; hexo new post \"新建一篇文章\" #新建一篇文章hexo generate 简写 hexo g #生成静态文件hexo server #启动服务器hexo deploy 简写 hexo d #部署网站hexo clean #清理缓存文件和已生成静态的文件hexo version #显示hexo的版本 本地图片的使用主配置_config.yml文件中将post_asset_folder:true 运行下面代码 1npm install https://github.com/CodeFalling/hexo-asset-image –save 图片的路径写法：”/images/hexo/bg.jpg” Hexo 主题安装主题的筛选Hexo主题 ( https://hexo.io/themes/ )页面,可以欣赏到很多很优秀的主题 下载主题点击图片,就会跳到这个主题的博客,看到实际的效果下载这个主题,就点击主题文字,进入主题Github页面,然后复制下载地址 进入blog目录,克隆主题到本地 1$ git clone https://github.com/TongchengQiu/hexo-theme-another.git themes/another 安装主题修改blog根目录的_config.yml,将theme修改为another 注意: 某些主题可能需要安装Node.js的插件,在安装主题时,最好在主题的Githu主页看看安装步骤","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"Hexo的基本使用","slug":"Hexo的基本使用","permalink":"http://yoursite.com/tags/Hexo的基本使用/"}],"keywords":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}]},{"title":"GitHub的基本使用","slug":"GitHub的SSH提交配置","date":"2018-04-18T09:09:08.000Z","updated":"2018-05-08T02:49:46.211Z","comments":true,"path":"2018/04/18/GitHub的SSH提交配置/","link":"","permalink":"http://yoursite.com/2018/04/18/GitHub的SSH提交配置/","excerpt":"","text":"Git可以通过https方式和ssh方式连接服务器上的仓库。两者比较：1.https： 比较方便，但是每次fetch和push代码都需要输入账号和密码，略显麻烦2.ssh： 传输前压缩数据，传输效率高，不需要每次提供账号密码 Git的user name和email设置12$ git config --global user.name \"xxxx\"$ git config --global user.email \"xxxx@163.com\" 生成密钥使用你注册github的邮箱生成秘钥 1$ ssh-keygen -t rsa -C \"xxxx@163.com\" 中间连续3次Enter键 .ssh目录会生成id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人（关于RSA加密，可以自行百度，这里不详细展开） 添加SSH key到github账户在GitHub的账户添加SSH Key，GitHub才能根据此进行加密解密，从而判断此提交是由你本人操作 测试SSH key是否设置成功1$ ssh -T git@github.com 123The authenticity of host 'github.com (192.30.253.113)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yes 是否继续连接？输入 yes 输出如下，则表示通过 1Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access. 设置项目连接方式1$ git remote set-url git@github.com:oDevilo/Java-Base 这里修改的是项目中 .git （隐藏）文件夹下的config文件原来如下： 123[remote \"origin\"] url = https://github.com/oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 修改后： 123[remote \"origin\"] url = git@github.com:oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 自动部署代码的方法123456789//在项目的_config.yml文件中进行设置deploy: type: git repo: git@github.com:FENGXIUWEI/FENGXIUWEI.github.io.git branch: master//命令hexo clean //清理缓存文件和已生成静态的文件hexo d //部署网站","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}],"tags":[{"name":"GitHub的基本使用","slug":"GitHub的基本使用","permalink":"http://yoursite.com/tags/GitHub的基本使用/"}],"keywords":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}]},{"title":"字体小图标的制作方法","slug":"字体小图标的制作","date":"2017-04-09T10:49:26.000Z","updated":"2018-05-08T05:52:27.361Z","comments":true,"path":"2017/04/09/字体小图标的制作/","link":"","permalink":"http://yoursite.com/2017/04/09/字体小图标的制作/","excerpt":"","text":"字体小图标的介绍Font Awesome （http://fontawesome.dashgame.com/)为您提供可缩放的矢量图标，可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。Font Awesome提供的字体小图标不一定能够满足开发项目的需求，因此我们需要根据自身的具体要求进行设计新的小图标。 制作.png格式图片1) 用PS设置符合自己需求的png小图标2) 在网站上面查找符合需求的png图片 相关网站：http://www.easyicon.net/iconsearch/light/3/ 将.png格式图片转化为SVG格式1）进入https://image.online-convert.com/convert-to-svg 页面2）点击上传，上传对应的图片 3.下载转化为svg格式的文件 将SVG格式文件转化为字体小图标1）进入https://icomoon.io/app/#/select/font 页面2) 导入SVG图片,并且选中需要生成的小图标 3）生成自己小图标,选中下方的download标签页,设置字体小图标的前缀名，避免与bootstrap中的冲突，点击download即可以进行下载字体小图标 将制作后的小图标应用于项目1）新建一个文件夹如icomoon，将下面的style.css和font文件夹拷贝到icomoon文件夹下面 2）在页面上引入style.css即可使用新建的字体小图标3）字体小图标的使用格式 &lt;i class=”iconnew-flightTop”&gt;&lt;/i&gt;","categories":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}],"tags":[{"name":"字体小图标的制作方法","slug":"字体小图标的制作方法","permalink":"http://yoursite.com/tags/字体小图标的制作方法/"}],"keywords":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}]}]}