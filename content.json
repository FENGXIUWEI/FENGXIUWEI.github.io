{"meta":{"title":"秀秀的博客","subtitle":null,"description":null,"author":"xiuxiu","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-04-09T13:30:01.000Z","updated":"2018-05-08T06:24:08.302Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-09T13:31:59.000Z","updated":"2018-04-16T09:30:41.350Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-04-13T09:24:01.000Z","updated":"2018-04-16T09:32:47.370Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ngrok的基本使用","slug":"ngrok的基本使用","date":"2018-05-03T06:15:33.000Z","updated":"2018-05-08T02:51:02.624Z","comments":true,"path":"2018/05/03/ngrok的基本使用/","link":"","permalink":"http://yoursite.com/2018/05/03/ngrok的基本使用/","excerpt":"","text":"ngrok使用的步骤1.把项目放到tomcat启动（即点击startup.bat）tomcat将项目放到tomcat下 启动tomcat 2.打开https://www.ngrok.cc/打开https://www.ngrok.cc/，登录系统，设置相关信息。 3.通过cmd进入客户端根目录（即sunny.exe所在目录），启动sunny.exe找到Sunny.exe所在的根目录 通过cmd进行启动，sunny.exe clientid id（https://www.ngrok.cc/ 网站上面的id） 4.外网访问（即：第三步，窗口看到的ip就是外网ip）红色线部分是指IP，http://xiuxiu.free.ngrok.cc/dist/index.html ，dist是指项目名称，index.html页面。","categories":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}],"tags":[{"name":"ngrok的使用","slug":"ngrok的使用","permalink":"http://yoursite.com/tags/ngrok的使用/"}],"keywords":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}]},{"title":"Vue.js的基本使用","slug":"Vue-js的基本使用","date":"2018-04-20T09:11:46.000Z","updated":"2018-05-08T02:52:05.473Z","comments":true,"path":"2018/04/20/Vue-js的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/20/Vue-js的基本使用/","excerpt":"","text":"路由的使用 安装路由模块 1Npm install vue-router --save 引入模块 1import VueRouter from ‘vue-router’ 作为vue的插件 1Vue.use(VueRouter) 创建路由实例对象 123New VueRouter(&#123;...配置参数&#125;) 注入vue选项参数 123New Vue(&#123;router&#125;) 告诉路由渲染的位置 1&lt;router-view&gt;&lt;/router-view&gt; Hash 和 History 模式vue-router默认 hash 模式 “#” url的hash模式，mode:history模式就是正常的路径模式,history带来的便利是可以使用浏览器的前进后退功能 123456789101112131415161718192021export default new Router(&#123; mode: &apos;history&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) router-link的各项配置router-link 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 a 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名 1234&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; to：目标路由的链接，此链接可以进行动态绑定的，tag：渲染成某种标签，如:li,event:默认为点击事件，也可以将其设置为鼠标移入的事件，mouseover 12345678910111213141516&lt;router-link :to=&apos;index&apos; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt;&lt;script&gt;export default &#123; name: &apos;App&apos;, data () &#123; return &#123; index: &apos;/home&apos; &#125; &#125;&#125;&lt;/script&gt; active-class：设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置 123456789101112131415161718192021222324252627282930313233//路由中设置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;)//组件中进行设置&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; 重定向和别名1234567891011121314151617181920212223242526272829303132333435363738394041424344export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125;, // 如果没有以上的地址，就将跳转到home页面 &#123; path: &apos;*&apos;, // component: Home // redirect: &apos;/home&apos; // redirect:&#123;path: &apos;/home&apos;&#125; // redirect:&#123;name: &apos;Home&apos;&#125; // 动态设置重定向的目标路径 redirect: (to) =&gt; &#123; // 目标路由对象，就是访问的路径的路由信息 if (to.path === &apos;/123&apos;) &#123; return &apos;/home&apos; &#125; else if (to.path === &apos;/456&apos;) &#123; return &#123;path: &apos;/doc&apos;&#125; &#125; else &#123; return &#123;name: &apos;Project&apos;&#125; &#125; // return &apos;/home&apos; &#125; &#125; ]&#125;) 嵌套路由使用exact：”是否激活” 默认类名的依据是 inclusive match （全包含匹配） 1234&lt;router-link to=&apos;/&apos; exact tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt; 子路由的配置 12345678910111213141516171819202122232425262728293031323334353637383940414243export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, // 默认子路由，有默认子路由就不要再父路由中设置name属性 component: study &#125;, &#123; path: &apos;work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 命名视图子路径的格式为：http://localhost:8081/work，即在子路径中加了/，就相对于跟路径来说的，子路径不需要嵌套，但是组件需要嵌套的。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//vue页面的写法，动态的绑定路径&lt;ul class=&quot;nav&quot;&gt; &lt;router-link :to=&quot;&#123;name: &apos;Project&apos;&#125;&quot; exact tag=&apos;li&apos;&gt; &lt;a&gt;study&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;work&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;work&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;hobby&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;hobby&lt;/a&gt; &lt;/router-link&gt;&lt;/ul&gt;//路由的配置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 多个router-view的应用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//app.vue&lt;router-view name=&quot;slider&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;//路由中的配置，一个路径对应一个组件用component，一个路径对应多个组件，用Components，默认的组件用default，其他的组件用router-view中name的值export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, components: &#123; default: Document, slider: slider &#125; &#125; ]&#125;)","categories":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}],"tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"}],"keywords":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}]},{"title":"markdown的语法","slug":"markdown的语法","date":"2018-04-20T02:04:16.000Z","updated":"2018-05-08T02:50:45.570Z","comments":true,"path":"2018/04/20/markdown的语法/","link":"","permalink":"http://yoursite.com/2018/04/20/markdown的语法/","excerpt":"","text":"斜体和粗体1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ 分级标题1234567891011这是一个一级标题============================这是一个二级标题--------------------------------------------------# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 超链接语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接文字’这样的形式。链接地址与链接标题前有一个空格。 12欢迎来到[梵居闹市](http://blog.leanote.com/freewalk)欢迎来到[梵居闹市](http://blog.leanote.com/freewalk &quot;梵居闹市&quot;) 列表使用 *，+，- 表示无序列表。 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 引用 语法说明： 引用需要在被引用的文本前加上&gt;符号。 123456&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4 插入图像1![图片Alt](图片地址 “图片Title”) 表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐 12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 分隔线12345* * *********- - ---------------------------------------- 代码语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者“code “,具体看示例。 1C语言里的函数 `scanf()` 怎么使用？ 首行缩进123半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; 锚点语法描述：在你准备跳转到的指定标题后插入锚点，然后在文档的其它地方写上连接到锚点的链接 12## 0. 目录&#123;#index&#125;跳转到[目录](#index)","categories":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}],"tags":[{"name":"markdown的语法","slug":"markdown的语法","permalink":"http://yoursite.com/tags/markdown的语法/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}]},{"title":"vuejs项目的下载","slug":"vuejs项目的下载","date":"2018-04-20T02:04:16.000Z","updated":"2018-04-20T08:02:54.388Z","comments":true,"path":"2018/04/20/vuejs项目的下载/","link":"","permalink":"http://yoursite.com/2018/04/20/vuejs项目的下载/","excerpt":"","text":"下载项目： 进入到需要下载vue的文件夹中 vue init webpack MyPrj(打包) 进入目录，安装依赖，cd MyPrj,npm install 运行项目npm run dev","categories":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}],"tags":[{"name":"vuejs项目的下载","slug":"vuejs项目的下载","permalink":"http://yoursite.com/tags/vuejs项目的下载/"}],"keywords":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}]},{"title":"Hexo的基本使用","slug":"Hexo的基本使用","date":"2018-04-18T09:09:08.000Z","updated":"2018-05-08T02:54:06.697Z","comments":true,"path":"2018/04/18/Hexo的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/18/Hexo的基本使用/","excerpt":"","text":"Hexo相关的网站https://hexo.io/zh-cn/docs/commands.html Hexo命令123456hexo new [layout] &lt;title&gt; hexo new post \"新建一篇文章\" #新建一篇文章hexo generate 简写 hexo g #生成静态文件hexo server #启动服务器hexo deploy 简写 hexo d #部署网站hexo clean #清理缓存文件和已生成静态的文件hexo version #显示hexo的版本 本地图片的使用主配置_config.yml文件中将post_asset_folder:true 运行下面代码 1npm install https://github.com/CodeFalling/hexo-asset-image –save 图片的路径写法：”/images/hexo/bg.jpg” Hexo 主题安装主题的筛选Hexo主题 ( https://hexo.io/themes/ )页面,可以欣赏到很多很优秀的主题 下载主题点击图片,就会跳到这个主题的博客,看到实际的效果下载这个主题,就点击主题文字,进入主题Github页面,然后复制下载地址 进入blog目录,克隆主题到本地 1$ git clone https://github.com/TongchengQiu/hexo-theme-another.git themes/another 安装主题修改blog根目录的_config.yml,将theme修改为another 注意: 某些主题可能需要安装Node.js的插件,在安装主题时,最好在主题的Githu主页看看安装步骤","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"Hexo的基本使用","slug":"Hexo的基本使用","permalink":"http://yoursite.com/tags/Hexo的基本使用/"}],"keywords":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}]},{"title":"GitHub的基本使用","slug":"GitHub的SSH提交配置","date":"2018-04-18T09:09:08.000Z","updated":"2018-05-08T02:49:46.211Z","comments":true,"path":"2018/04/18/GitHub的SSH提交配置/","link":"","permalink":"http://yoursite.com/2018/04/18/GitHub的SSH提交配置/","excerpt":"","text":"Git可以通过https方式和ssh方式连接服务器上的仓库。两者比较：1.https： 比较方便，但是每次fetch和push代码都需要输入账号和密码，略显麻烦2.ssh： 传输前压缩数据，传输效率高，不需要每次提供账号密码 Git的user name和email设置12$ git config --global user.name \"xxxx\"$ git config --global user.email \"xxxx@163.com\" 生成密钥使用你注册github的邮箱生成秘钥 1$ ssh-keygen -t rsa -C \"xxxx@163.com\" 中间连续3次Enter键 .ssh目录会生成id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人（关于RSA加密，可以自行百度，这里不详细展开） 添加SSH key到github账户在GitHub的账户添加SSH Key，GitHub才能根据此进行加密解密，从而判断此提交是由你本人操作 测试SSH key是否设置成功1$ ssh -T git@github.com 123The authenticity of host 'github.com (192.30.253.113)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yes 是否继续连接？输入 yes 输出如下，则表示通过 1Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access. 设置项目连接方式1$ git remote set-url git@github.com:oDevilo/Java-Base 这里修改的是项目中 .git （隐藏）文件夹下的config文件原来如下： 123[remote \"origin\"] url = https://github.com/oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 修改后： 123[remote \"origin\"] url = git@github.com:oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 自动部署代码的方法123456789//在项目的_config.yml文件中进行设置deploy: type: git repo: git@github.com:FENGXIUWEI/FENGXIUWEI.github.io.git branch: master//命令hexo clean //清理缓存文件和已生成静态的文件hexo d //部署网站","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}],"tags":[{"name":"GitHub的基本使用","slug":"GitHub的基本使用","permalink":"http://yoursite.com/tags/GitHub的基本使用/"}],"keywords":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}]},{"title":"字体小图标的制作方法","slug":"字体小图标的制作","date":"2017-04-09T10:49:26.000Z","updated":"2018-05-08T05:52:27.361Z","comments":true,"path":"2017/04/09/字体小图标的制作/","link":"","permalink":"http://yoursite.com/2017/04/09/字体小图标的制作/","excerpt":"","text":"字体小图标的介绍Font Awesome （http://fontawesome.dashgame.com/)为您提供可缩放的矢量图标，可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。Font Awesome提供的字体小图标不一定能够满足开发项目的需求，因此我们需要根据自身的具体要求进行设计新的小图标。 制作.png格式图片1) 用PS设置符合自己需求的png小图标2) 在网站上面查找符合需求的png图片 相关网站：http://www.easyicon.net/iconsearch/light/3/ 将.png格式图片转化为SVG格式1）进入https://image.online-convert.com/convert-to-svg 页面2）点击上传，上传对应的图片 3.下载转化为svg格式的文件 将SVG格式文件转化为字体小图标1）进入https://icomoon.io/app/#/select/font 页面2) 导入SVG图片,并且选中需要生成的小图标 3）生成自己小图标,选中下方的download标签页,设置字体小图标的前缀名，避免与bootstrap中的冲突，点击download即可以进行下载字体小图标 将制作后的小图标应用于项目1）新建一个文件夹如icomoon，将下面的style.css和font文件夹拷贝到icomoon文件夹下面 2）在页面上引入style.css即可使用新建的字体小图标3）字体小图标的使用格式 &lt;i class=”iconnew-flightTop”&gt;&lt;/i&gt;","categories":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}],"tags":[{"name":"字体小图标的制作方法","slug":"字体小图标的制作方法","permalink":"http://yoursite.com/tags/字体小图标的制作方法/"}],"keywords":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}]}]}